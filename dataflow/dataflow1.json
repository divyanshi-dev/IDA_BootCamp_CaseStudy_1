{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Raw_vendor_data",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Acquisition_vendor_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VENDOR_OR_CREDITOR_ACCOUNT_NO as string,",
				"          VENDOR_NAME_1 as string,",
				"          VENDOR_ADDRESS as string,",
				"          VENDOR_CITY_NAME as string,",
				"          VENDOR_POSTAL_CODE as string,",
				"          VENDOR_RECORD_CREATE_BY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(isValid = iif(!isNull(VENDOR_OR_CREDITOR_ACCOUNT_NO) && !isNull(VENDOR_NAME_1) && !isNull(VENDOR_ADDRESS) && !isNull(VENDOR_CITY_NAME) && !isNull(VENDOR_POSTAL_CODE) && !isNull(VENDOR_RECORD_CREATE_BY), 1, 0)) ~> derivedColumn1",
				"derivedColumn1 filter(isValid == 1) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['output.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}